// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  uniNumber      String   @unique
  birthDate      DateTime
  nationalNumber String
  nationality String
  studentStatus String? @default("")
  specialization String
  roleId String @db.ObjectId @default("676b012d1ebbc2448c45d59e")
  hashedPassword String?
  recommendations String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // request Request[]
  // roleStudent Role[]
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  requestTraining RequestTraining[]
  company Company[]
  report Report[]
}

model Role {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  user User[]
}

model Report {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    companyId String @db.ObjectId
    userId String @db.ObjectId
    diSupNote String
    attendance Json
    rate Json
    createdAt DateTime @default(now())

    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete:Cascade)
}

model RequestTraining {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  companyId String @db.ObjectId
  universityStatus String? @default("pending")
  companyStatus String? @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete:Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    email String
    userId String @db.ObjectId
    phoneNumber String?
    address String?
    status String @default("pending")
    location String
    traSuViNa String?
    traActAr String
    createdAt DateTime @default(now())

    report Report[]
    request RequestTraining[]
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// model Request {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @unique @db.ObjectId
//   admission String? @default("معلق")
//   file String
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
